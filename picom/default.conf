picom (vgit-44b49)
Please report bugs to https://github.com/yshui/picom

usage: picom [options]
Options:

-r radius
  The blur radius for shadows. (default 12)

-o opacity
  The translucency for shadows. (default .75)

-l left-offset
  The left offset for shadows. (default -15)

-t top-offset
  The top offset for shadows. (default -15)

-I fade-in-step
  Opacity change between steps while fading in. (default 0.028)

-O fade-out-step
  Opacity change between steps while fading out. (default 0.03)

-D fade-delta-time
  The time between steps in a fade in milliseconds. (default 10)

-m opacity
  The opacity for menus. (default 1.0)

-c
  Enabled client-side shadows on windows.

-C
  Avoid drawing shadows on dock/panel windows.

-z
  Zero the part of the shadow's mask behind the window.

-f
  Fade windows in/out when opening/closing and when opacity
  changes, unless --no-fading-openclose is used.

-F
  Equals to -f. Deprecated.

-i opacity
  Opacity of inactive windows. (0.1 - 1.0)

-e opacity
  Opacity of window titlebars and borders. (0.1 - 1.0)

-G
  Don't draw shadows on DND windows

-b
  Daemonize process.

--show-all-xerrors
  Show all X errors (for debugging).

--config path
  Look for configuration file at the path. Use /dev/null to avoid
  loading configuration file.

--write-pid-path path
  Write process ID to a file.

--shadow-red value
  Red color value of shadow (0.0 - 1.0, defaults to 0).

--shadow-green value
  Green color value of shadow (0.0 - 1.0, defaults to 0).

--shadow-blue value
  Blue color value of shadow (0.0 - 1.0, defaults to 0).

--inactive-opacity-override
  Inactive opacity set by -i overrides value of _NET_WM_OPACITY.

--inactive-dim value
  Dim inactive windows. (0.0 - 1.0, defaults to 0)

--active-opacity opacity
  Default opacity for active windows. (0.0 - 1.0)

--corner-radius value
  Round the corners of windows. (defaults to 0)

--rounded-corners-exclude condition
  Exclude conditions for rounded corners.

--round-borders value
  When rounding corners, round the borders of windows. (defaults to 1)

--round-borders-exclude condition
  Exclude conditions for rounding borders.

--mark-wmwin-focused
  Try to detect WM windows and mark them as active.

--shadow-exclude condition
  Exclude conditions for shadows.

--fade-exclude condition
  Exclude conditions for fading.

--mark-ovredir-focused
  Mark windows that have no WM frame as active.

--no-fading-openclose
  Do not fade on window open/close.

--no-fading-destroyed-argb
  Do not fade destroyed ARGB windows with WM frame. Workaround of bugs
  in Openbox, Fluxbox, etc.

--shadow-ignore-shaped
  Do not paint shadows on shaped windows. (Deprecated, use
  --shadow-exclude 'bounding_shaped' or
  --shadow-exclude 'bounding_shaped && !rounded_corners' instead.)

--detect-rounded-corners
  Try to detect windows with rounded corners and don't consider
  them shaped windows. Affects --shadow-ignore-shaped,
  --unredir-if-possible, and possibly others. You need to turn this
  on manually if you want to match against rounded_corners in
  conditions.

--detect-client-opacity
  Detect _NET_WM_OPACITY on client windows, useful for window
  managers not passing _NET_WM_OPACITY of client windows to frame
  windows.

--refresh-rate val
  Specify refresh rate of the screen. If not specified or 0, we
  will try detecting this with X RandR extension.

--vsync
  Enable VSync

--paint-on-overlay
  Painting on X Composite overlay window.

--sw-opti
  Limit repaint to at most once every 1 / refresh_rate second.

--use-ewmh-active-win
  Use _NET_WM_ACTIVE_WINDOW on the root window to determine which
  window is focused instead of using FocusIn/Out events.

--unredir-if-possible
  Unredirect all windows if a full-screen opaque window is
  detected, to maximize performance for full-screen windows.

--unredir-if-possible-delay ms
  Delay before unredirecting the window, in milliseconds.
  Defaults to 0.

--unredir-if-possible-exclude condition
  Conditions of windows that shouldn't be considered full-screen
  for unredirecting screen.

--focus-exclude condition
  Specify a list of conditions of windows that should always be
  considered focused.

--inactive-dim-fixed
  Use fixed inactive dim value.

--max-brightness
  Dims windows which average brightness is above this threshold.
  Requires --no-use-damage.
  Default: 1.0 or no dimming.

--detect-transient
  Use WM_TRANSIENT_FOR to group windows, and consider windows in
  the same group focused at the same time.

--detect-client-leader
  Use WM_CLIENT_LEADER to group windows, and consider windows in
  the same group focused at the same time. WM_TRANSIENT_FOR has
  higher priority if --detect-transient is enabled, too.

--blur-method
  The algorithm used for background bluring. Available choices are:
  'none' to disable, 'dual_kawase', 'gaussian', 'box' or 'kernel'
  for custom convolution blur with --blur-kern.
  Note: 'gaussian' and 'box' require --experimental-backends.

--blur-size
  The radius of the blur kernel for 'box' and 'gaussian' blur method.

--blur-deviation
  The standard deviation for the 'gaussian' blur method.

--blur-strength
  Only valid for '--blur-method dual_kawase'!
  The strength of the kawase blur as an integer between 1 and 20. Defaults to 5.

--blur-background
  Blur background of semi-transparent / ARGB windows. Bad in
  performance. The switch name may change without prior
  notifications.

--blur-background-frame
  Blur background of windows when the window frame is not opaque.
  Implies --blur-background. Bad in performance. The switch name
  may change.

--blur-background-fixed
  Use fixed blur strength instead of adjusting according to window
  opacity.

--blur-kern matrix
  Only valid for '--blur-method convolution'!
  Specify the blur convolution kernel, with the following format:
    WIDTH,HEIGHT,ELE1,ELE2,ELE3,ELE4,ELE5...
  The element in the center must not be included, it will be forever
  1.0 or changing based on opacity, depending on whether you have
  --blur-background-fixed.
  A 7x7 Gaussian blur kernel looks like:
    --blur-kern '7,7,0.000003,0.000102,0.000849,0.001723,0.000849,0.000102,0.000003,0.000102,0.003494,0.029143,0.059106,0.029143,0.003494,0.000102,0.000849,0.029143,0.243117,0.493069,0.243117,0.029143,0.000849,0.001723,0.059106,0.493069,0.493069,0.059106,0.001723,0.000849,0.029143,0.243117,0.493069,0.243117,0.029143,0.000849,0.000102,0.003494,0.029143,0.059106,0.029143,0.003494,0.000102,0.000003,0.000102,0.000849,0.001723,0.000849,0.000102,0.000003'
  Up to 4 blur kernels may be specified, separated with semicolon, for
  multi-pass blur.
  May also be one the predefined kernels: 3x3box (default), 5x5box,
  7x7box, 3x3gaussian, 5x5gaussian, 7x7gaussian, 9x9gaussian,
  11x11gaussian.

--blur-background-exclude condition
  Exclude conditions for background blur.

--resize-damage integer
  Resize damaged region by a specific number of pixels. A positive
  value enlarges it while a negative one shrinks it. Useful for
  fixing the line corruption issues of blur. May or may not
  work with --glx-no-stencil. Shrinking doesn't function correctly.

--invert-color-include condition
  Specify a list of conditions of windows that should be painted with
  inverted color. Resource-hogging, and is not well tested.

--opacity-rule opacity:condition
  Specify a list of opacity rules, in the format "PERCENT:PATTERN",
  like '50:name *= "Firefox"'. picom-trans is recommended over
  this. Note we do not distinguish 100% and unset, and we don't make
  any guarantee about possible conflicts with other programs that set
  _NET_WM_WINDOW_OPACITY on frame or client windows.

--shadow-exclude-reg geometry
  Specify a X geometry that describes the region in which shadow
  should not be painted in, such as a dock window region.
  Use --shadow-exclude-reg 'x10+0-0', for example, if the 10 pixels
  on the bottom of the screen should not have shadows painted on.

--xinerama-shadow-crop
  Crop shadow of a window fully on a particular Xinerama screen to the
  screen.

--backend backend
  Choose backend. Possible choices are xrender, glx, and
  xr_glx_hybrid.

--glx-no-stencil
  GLX backend: Avoid using stencil buffer. Might cause issues
  when rendering transparent content. My tests show a 15% performance
  boost.

--glx-no-rebind-pixmap
  GLX backend: Avoid rebinding pixmap on window damage. Probably
  could improve performance on rapid window content changes, but is
  known to break things on some drivers (LLVMpipe, xf86-video-intel,
  etc.).

--no-use-damage
  Disable the use of damage information. This cause the whole screen to
  be redrawn everytime, instead of the part of the screen that has
  actually changed. Potentially degrades the performance, but might fix
  some artifacts.

--xrender-sync-fence
  Additionally use X Sync fence to sync clients' draw calls. Needed
  on nvidia-drivers with GLX backend for some users.

--force-win-blend
  Force all windows to be painted with blending. Useful if you have a
  --glx-fshader-win that could turn opaque pixels transparent.

--dbus
  Enable remote control via D-Bus. See the D-BUS API section in the
  man page for more details.

--benchmark cycles
  Benchmark mode. Repeatedly paint until reaching the specified cycles.

--benchmark-wid window-id
  Specify window ID to repaint in benchmark mode. If omitted or is 0,
  the whole screen is repainted.

--monitor-repaint
  Highlight the updated area of the screen. For debugging the xrender
  backend only.

--debug-mode
  Render into a separate window, and don't take over the screen. Useful
  when you want to attach a debugger to picom

--no-ewmh-fullscreen
  Do not use EWMH to detect fullscreen windows. Reverts to checking
  if a window is fullscreen based only on its size and coordinates.

--transparent-clipping
  Make transparent windows clip other windows like non-transparent windows
  do, instead of blending on top of them
